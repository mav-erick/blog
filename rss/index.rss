<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>The Code Journal</title><description>Python, JavaScript and more</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>The Code Journal</title><link>http://localhost:2368/</link></image><generator>Ghost 1.25</generator><lastBuildDate>Sun, 29 Jul 2018 05:03:28 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Custom directives in Angular 6 — building a Google places autocomplete</title><description>&lt;p&gt;Final Project: &lt;a href="http://ng-places-maverick.surge.sh/" rel="nofollow noopener"&gt;http://ng-places-maverick.surge.sh/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I have been playing around with Angular a lot lately and a lot of things that seemed unnecessary in the beginning is starting to make sense. Angular is a well thought out framework, and although it is very opinionated, it follows some of the&lt;/p&gt;</description><link>http://localhost:2368/custom-directives/</link><guid isPermaLink="false">5b5d46bc550d572610b60772</guid><category>Angular</category><category>Custom-directives</category><category>JavaScript</category><dc:creator>Abhishek Menon</dc:creator><pubDate>Sun, 22 Jul 2018 13:57:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/07/1_WNeChyJ5f8nwVue8hkZEPg-1.gif" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2018/07/1_WNeChyJ5f8nwVue8hkZEPg-1.gif" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;p&gt;Final Project: &lt;a href="http://ng-places-maverick.surge.sh/" rel="nofollow noopener"&gt;http://ng-places-maverick.surge.sh/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I have been playing around with Angular a lot lately and a lot of things that seemed unnecessary in the beginning is starting to make sense. Angular is a well thought out framework, and although it is very opinionated, it follows some of the industry best practices when it comes to structuring the frontend of a web application. It was fascinating to discover how much focus is there on code reusability both within a project and across multiple projects! I would like to show you an example, using Angular directives.&lt;/p&gt;&lt;h4 id="what-is-a-directive"&gt;&lt;strong&gt;What is a directive?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;A directive allows you to attach a behavior to DOM elements. This behavior could be as simple or as complex as you’d like.&lt;code&gt;*ngFor&lt;/code&gt; and &lt;code&gt;*ngIf&lt;/code&gt; are examples of built-in directives in Angular. In this article, I will show you how to make a custom Google place autocomplete directive that you can attach to any text input.&lt;/p&gt;&lt;h4 id="before-we-begin-"&gt;Before we begin…&lt;/h4&gt;&lt;p&gt;To use Google places autocomplete API, we need an API key. To obtain an API key, please go to the &lt;a href="https://cloud.google.com/maps-platform/" rel="noopener"&gt;Google maps platform&lt;/a&gt; and create a new project.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_qp5zCTTyarZExL0Rbfphog.png" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;Once you signup, you can find your API key from the &lt;a href="https://console.cloud.google.com/google/maps-apis/" rel="noopener"&gt;developer console&lt;/a&gt;. Note this API key down for later.&lt;/p&gt;&lt;h4 id="setting-up-an-angular-project"&gt;Setting up an Angular project&lt;/h4&gt;&lt;p&gt;Install &lt;a href="https://nodejs.org/en/download/" rel="noopener"&gt;Node.js®&lt;/a&gt; and npm if they are not already on your machine. Now, install Angular CLI globally using..&lt;/p&gt;&lt;p&gt;&lt;code&gt;npm i -g @angular/cli&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Once this is done, let’s create a new Angular project with the following command:&lt;/p&gt;&lt;p&gt;&lt;code&gt;ng new google-places-example&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now go into your project directory and start the Angular development server:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd google-places-example
ng serve&lt;/code&gt;&lt;/pre&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_6yJSVXv7ScPt6Lu4v851pA.png" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;If you go to the server running at &lt;code&gt;&lt;a href="http://localhost:4200/"&gt;http://localhost:4200&lt;/a&gt;&lt;/code&gt;, you will see the above screen.&lt;/p&gt;&lt;p&gt;Nice! Now let’s create an input field to which we will attach the Angular directive. Open the Angular project in your favorite text editor and open the file &lt;code&gt;src/app/app.component.html&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Change the contents of the file to the following&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/45999203801cd477886666949cf34dba.js"&gt;&lt;/script&gt;&lt;p&gt;Now, let’s add some styling to make our input field look nice. Edit your &lt;code&gt;src/app/app.component.css&lt;/code&gt; to the following&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/72af4514cf3c5e067d7e3f87940d9787.js"&gt;&lt;/script&gt;&lt;p&gt;After this, if you check your development server at &lt;code&gt;&lt;a href="http://localhost:4200/"&gt;http://localhost:4200&lt;/a&gt;&lt;/code&gt;, you should see something like this.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_z0yHczug6VEvpM7pxzFBxA.png" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;Nice, but “app” is a rather boring name for our app :D. Let’s give it a more descriptive name. Open &lt;code&gt;src/app/app.component.ts&lt;/code&gt; and change the &lt;code&gt;title&lt;/code&gt;variable to whatever you like. I am going to call my app “Places”.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_UQ0EHzlJBOaafj-6CvEshg.png" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;Cool, now let’s start with the directive.&lt;/p&gt;&lt;h4 id="generating-a-directive-using-angular-cli"&gt;Generating a directive using Angular CLI&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ng g d google-places&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Here, ‘g’ is short for generate and ‘d’ is short for directive. This should generate two files in &lt;code&gt;src/app&lt;/code&gt; called &lt;code&gt;google-places.directive.ts&lt;/code&gt; and &lt;code&gt;google-places.directive.spec.ts&lt;/code&gt;. All files ending with &lt;code&gt;spec.ts&lt;/code&gt; are containers for writing unit tests.&lt;/p&gt;&lt;p&gt;When we place a directive in an element, we get access to a reference to that element in our directive. We will use this reference to attach the autocomplete functionality to the input element. Now, modify the &lt;code&gt;google-places.directive.ts&lt;/code&gt; to the following&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/8ca63274a72b414322076b70bdd23d8d.js"&gt;&lt;/script&gt;&lt;p&gt;Please note that I have changed the name of the &lt;code&gt;selector&lt;/code&gt; as I am not a fan of the autogenerated one. Here, we are getting access to the &lt;code&gt;ElementRef&lt;/code&gt; made available to us via the constructor, and storing the &lt;code&gt;nativeElement&lt;/code&gt; property into a variable, so that we can pass it to google places autocomplete constructor. Once you’re done, you have to modify the index.html found in &lt;code&gt;src&lt;/code&gt; folder of your project to add the google places script. Place the following script between the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;amp;libraries=places" async defer&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Replace YOUR_API_KEY with the API key you had noted down from earlier. Then, restart the Angular development server.&lt;/p&gt;&lt;p&gt;Now we need to add the directive to our input tag. Modify the &lt;code&gt;input&lt;/code&gt; in &lt;code&gt;src/app/app.component.html&lt;/code&gt; to the following&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;input
  google-place
  type="text"
  class="google-place-input"
  placeholder="Type to search.."&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All the change we made was to add the directive selector to the input. Save the file, go to the development server and start typing. You should see the following..&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_c8wheI3a9zROSFbJFDm9PA.png" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;Viola! Now you have autocomplete on your very own input field. You can use this autocomplete directive as many times as you want, wherever you want!&lt;/p&gt;&lt;h4 id="sending-events-from-the-directive"&gt;Sending events from the directive&lt;/h4&gt;&lt;p&gt;Now that we have an awesome autocomplete, we might want to send a formatted address instead of a string back to the input field. Let’s see how to do it.&lt;/p&gt;&lt;p&gt;Modify your &lt;code&gt;google-places.directive.ts&lt;/code&gt; like so&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/861d5844817f464990fbbe34015c62d5.js"&gt;&lt;/script&gt;&lt;p&gt;We have done two things here:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We created a function &lt;code&gt;getFormattedAddress&lt;/code&gt; which takes a google place object as an argument and parses it to create a useful address object.&lt;/li&gt;&lt;li&gt;We added an event listener to the autocomplete API, which will fire every time the place is changed, and we are using this event listener to emit our own event which will parse the place object using the above &lt;code&gt;getFormattedAddress&lt;/code&gt; and send the resulting address object back to the input element.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We have exposed this event through an &lt;code&gt;onSelect&lt;/code&gt; event emitter. Now let’s use this event emitter in our input.&lt;/p&gt;&lt;p&gt;Modify the &lt;code&gt;src/app/app.component.ts&lt;/code&gt; to the following:&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/f3b8a3c130d73ca64252b1468370dc3a.js"&gt;&lt;/script&gt;&lt;p&gt;We have created a function called &lt;code&gt;setAddress&lt;/code&gt; which we will call everytime the event emitter emits a new value. We will store the object received and its keys to display it back to the user. Now, let’s modify the &lt;code&gt;app.component.html&lt;/code&gt;to consume the event and display the result:&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/5e1b67ef695be459db4748ba6b8ed283.js"&gt;&lt;/script&gt;&lt;p&gt;Check the development server and now we will see the following result:&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_WNeChyJ5f8nwVue8hkZEPg.gif" class="kg-image" alt="Custom directives in Angular 6 — building a Google places autocomplete"&gt;&lt;/figure&gt;&lt;p&gt;Awesome! We have created our very own custom google-place directive, which can provide autocomplete to any input field, and emit a formatted address object from the input field.&lt;/p&gt;&lt;p&gt;You can find this Angular project in my GitHub &lt;a href="https://github.com/mav-erick/angular-google-places-autocomplete-directive" rel="noopener"&gt;repo&lt;/a&gt;. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Periodic Tor IP Rotation in 10 minutes</title><description>&lt;h3 id="the-approach"&gt;&lt;strong&gt;&lt;strong&gt;The approach&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;We will set up Tor, create a proxy service to tunnel our requests through tor, and use the &lt;code&gt;&lt;a href="https://stem.torproject.org/" rel="noopener"&gt;STEM&lt;/a&gt;&lt;/code&gt; library to rotate the IP periodically.&lt;/p&gt;&lt;h3 id="downloads"&gt;&lt;strong&gt;&lt;strong&gt;Downloads&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Proxy Server&lt;/strong&gt;&lt;/strong&gt;: &lt;a href="http://www.privoxy.org/" rel="nofollow noopener"&gt;http://www.privoxy.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Tor&lt;/strong&gt;&lt;/strong&gt;: &lt;a href="https://www.torproject.org/download/download-easy.html.en" rel="nofollow noopener"&gt;https://www.torproject.org/download/download-easy.html.e&lt;/a&gt;n&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Python: &lt;/strong&gt;&lt;/strong&gt;&lt;a href="https://www.python.org/downloads/" rel="nofollow noopener"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/periodic-tor-ip-rotation-in-10-minutes/</link><guid isPermaLink="false">5b5d4572550d572610b60770</guid><dc:creator>Abhishek Menon</dc:creator><pubDate>Tue, 19 Jun 2018 14:41:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/07/1_rB3ohibjixfGBtmtQn40PQ.jpeg" medium="image"/><content:encoded>&lt;h3 id="the-approach"&gt;&lt;strong&gt;&lt;strong&gt;The approach&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_rB3ohibjixfGBtmtQn40PQ.jpeg" alt="Periodic Tor IP Rotation in 10 minutes"&gt;&lt;p&gt;We will set up Tor, create a proxy service to tunnel our requests through tor, and use the &lt;code&gt;&lt;a href="https://stem.torproject.org/" rel="noopener"&gt;STEM&lt;/a&gt;&lt;/code&gt; library to rotate the IP periodically.&lt;/p&gt;&lt;h3 id="downloads"&gt;&lt;strong&gt;&lt;strong&gt;Downloads&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Proxy Server&lt;/strong&gt;&lt;/strong&gt;: &lt;a href="http://www.privoxy.org/" rel="nofollow noopener"&gt;http://www.privoxy.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Tor&lt;/strong&gt;&lt;/strong&gt;: &lt;a href="https://www.torproject.org/download/download-easy.html.en" rel="nofollow noopener"&gt;https://www.torproject.org/download/download-easy.html.e&lt;/a&gt;n&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Python: &lt;/strong&gt;&lt;/strong&gt;&lt;a href="https://www.python.org/downloads/" rel="nofollow noopener"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Pip: &lt;/strong&gt;&lt;/strong&gt;&lt;a href="https://pip.pypa.io/en/stable/installing/" rel="nofollow noopener"&gt;https://pip.pypa.io/en/stable/installing/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You probably have python and pip already installed. If you don’t, please follow the instructions in the link.&lt;/p&gt;&lt;p&gt;Both Privoxy and Tor has excellent installation guides for all major OSes, please follow that in the link to set it up correctly.&lt;/p&gt;&lt;h3 id="configuration"&gt;&lt;strong&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Open privoxy config &lt;code&gt;sudo vi /usr/local/etc/privoxy/config&lt;/code&gt; (The path might be different for Linux/Windows)&lt;/p&gt;&lt;p&gt;Append the following line. Notice the . in the end.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;forward-socks5   /               127.0.0.1:9150 .&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Restart privoxy&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo /path/to/Privoxy/stopPrivoxy.sh
sudo /path/to/Privoxy/startPrivoxy.sh&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="install-stem-library"&gt;Install stem library&lt;/h4&gt;&lt;p&gt;Stem library will be used for managing Tor using Python.&lt;/p&gt;&lt;p&gt;&lt;code&gt;pip install stem&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now, find the torrc file of your Tor installation for your respective operating system.&lt;/p&gt;&lt;p&gt;Current location in Mac OSX is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~/Library/Application Support/TorBrowser-Data/Tor/torrc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you find it, modify it to add a control port by appending the following lines to the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ControlPort 9051
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save the file and restart Tor.&lt;/p&gt;&lt;h3 id="test-the-setup"&gt;Test the setup&lt;/h3&gt;&lt;p&gt;To test your tor setup, use the following script:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import requests
from stem import Signal
from stem.control import Controller

with Controller.from_port(port = 9051) as controller:
  controller.authenticate()
  controller.signal(Signal.NEWNYM)

proxies = {
  "http": "http://127.0.0.1:8118"
}
headers = {
  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.73.11 (KHTML, like Gecko) Version/7.0.1 Safari/537.73.11'
}

r = requests.get("http://icanhazip.com", proxies=proxies, headers=headers)
print (r.text)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everytime you run this, you should see a new IP.&lt;/p&gt;&lt;h3 id="periodic-ip-rotation"&gt;&lt;strong&gt;&lt;strong&gt;Periodic IP rotation&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The following script autorotates the IP periodically. Let’s call this &lt;code&gt;rotate.py&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import time
from stem import Signal
from stem.control import Controller

def main():
    while True:
        time.sleep(20)
        print ("Rotating IP")
        with Controller.from_port(port = 9051) as controller:
          controller.authenticate()
          controller.signal(Signal.NEWNYM)


if __name__ == '__main__':
    main()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before you start up your scraper, you can run &lt;code&gt;rotate.py&lt;/code&gt; so that it keeps rotating your Tor IP. In your crawler, use the following proxies and headers to tunnel your requests through the tor proxy.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;proxies = {
  "http": "http://127.0.0.1:8118"
}

headers = {
  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.73.11 (KHTML, like Gecko) Version/7.0.1 Safari/537.73.11'
}

r = requests.get("&amp;lt;request-url&amp;gt;", proxies=proxies, headers=headers)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That’s it! You have successfully set up periodic IP rotation. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Django for React/Angular/Mobile Apps</title><description>&lt;p&gt;This article is for people who fall in any of the following categories:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;You’re a front end developer coming from using a DBaaS platform like Firebase.&lt;/li&gt;&lt;li&gt;You’re a Django developer, who recently picked up React/Angular, or started playing with mobile apps.&lt;/li&gt;&lt;li&gt;You’re a beginner front end&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/django-for-react-angular-mobile-apps/</link><guid isPermaLink="false">5b5d3a79550d572610b6076e</guid><dc:creator>Abhishek Menon</dc:creator><pubDate>Tue, 20 Mar 2018 13:02:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/07/1_-EFe3VOUOn6cThHUBRSL2Q.jpeg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2018/07/1_-EFe3VOUOn6cThHUBRSL2Q.jpeg" alt="Django for React/Angular/Mobile Apps"&gt;&lt;p&gt;This article is for people who fall in any of the following categories:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;You’re a front end developer coming from using a DBaaS platform like Firebase.&lt;/li&gt;&lt;li&gt;You’re a Django developer, who recently picked up React/Angular, or started playing with mobile apps.&lt;/li&gt;&lt;li&gt;You’re a beginner front end developer, and you are intimidated by the complexity of backend development.&lt;/li&gt;&lt;li&gt;You want to use a matured framework to build your backend services.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Django is a high level web framework written in Python, and has been around for many years now. Hence it is very stable, and has a lot of resources online if you ever get stuck.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Why is using Django alongside Angular, React or a Mobile SDK not straightforward?&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Django is a full stack web framework, which means it comes with its own ORM, templating engine etc and it is built so that the entire application runs as a single service. But if you’re using a frontend framework, or a mobile SDK, it is designed so that the client/frontend is completely decoupled from the backend.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_EpimmBm0H2UBGhDxMKUiyA.png" class="kg-image" alt="Django for React/Angular/Mobile Apps"&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Then what’s the point of using Django?&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We don’t need to use all of Django’s features to get the best out of it. Infact one of the major weaknesses of Django is that it is not really built for Web 2.0. But this has more to do with frontend than backend. And these weaknesses are easily addressed by the front end frameworks, bringing in all that is required for Web 2.0 to Django. Hence we are getting the best of both worlds using Django just in the backend! The only missing piece in the puzzle is a REST based communication architecture between the frontend and backend, that can facilitate complete decoupling. &lt;a href="http://www.django-rest-framework.org/" rel="noopener"&gt;Django REST Framework&lt;/a&gt; does just that.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Proposed Architecture&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_9SmHhzWDXBCpRi3CpQKowg.png" class="kg-image" alt="Django for React/Angular/Mobile Apps"&gt;&lt;/figure&gt;&lt;p&gt;Evidently, this setup will work for any Mobile/Frontend framework.&lt;/p&gt;&lt;p&gt;In this article, we are only going to cover what we need in Django. Django is a fairly large framework, and covering all parts of it is out of the scope of this article. However, I will try to cover the basic concepts you need to know.&lt;/p&gt;&lt;p&gt;If you already know Django, please feel free to skip to the section &lt;strong&gt;&lt;strong&gt;‘Our first Django app’&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Getting started with Django&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Before we get started, you need to have python and pip installed on your system. If you don’t, please go ahead and install it before you continue. We are going to use Python 3.6 in this article. To start working on our project, let’s create a virtual environment called &lt;code&gt;mobileBackend&lt;/code&gt;. If you don’t have virtualenv installed, install it by running &lt;code&gt;pip install virtualenv&lt;/code&gt;. Then run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;virtualenv -p python3 mobileBackend &amp;amp;&amp;amp; cd mobileBackend
source bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These commands will create a virtual environment called mobileBackend, using Python 3 as the default python interpreter, open the directory, and activate the virtual environment. Django doesn’t have a package manager, hence we use a virtual environment to manage the package dependencies. We can get a list of all dependencies by running &lt;code&gt;pip freeze&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Installing Django and Django Rest Framework&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;pip install django djangorestframework&lt;/p&gt;&lt;p&gt;Django Rest Framework, is a library, which makes it easier for us to work with REST APIs in Django.&lt;/p&gt;&lt;p&gt;Now let’s create our Django project. We will call our Django project with the same name as our virtual environment. You can choose any name you want for your project and virtual environment. Here, we are going to call both mobileBackend. Run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;django-admin startproject mobileBackend &amp;amp;&amp;amp; cd mobileBackend&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command creates our Django project called mobileBackend and opens the mobileBackend directory.&lt;/p&gt;&lt;p&gt;Here you would see two things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;manage.py (File)&lt;/li&gt;&lt;li&gt;mobileBackend (Folder)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To understand what these mysterious things are, we need to first explore how Django is structured. A Django project is a collection of apps and configuration. An app in Django is a unit of the project that has a defined purpose — e.g., If you’re building a Blog, its apps could be articles, users, activities etc. As a general rule of thumb, an app in a Django project should be something that you can describe one sentence. Ex: Users app manages all the users of the website.&lt;/p&gt;&lt;p&gt;When you create your project, Django by default creates an app with the same name as the project as an entry point to the project. That is why there is a folder with the same name as your project. And &lt;code&gt;manage.py&lt;/code&gt; is a command line utility, using which you can interact with your Django project.&lt;/p&gt;&lt;p&gt;Let’s give this a shot.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Running the Django development server&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run your Django development server using:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll see the following output on your terminal.&lt;/p&gt;&lt;h4 id="performing-system-checks-"&gt;Performing system checks…&lt;/h4&gt;&lt;h4 id="system-check-identified-no-issues-0-silenced-"&gt;System check identified no issues (0 silenced).&lt;/h4&gt;&lt;h4 id="you-have-14-unapplied-migration-s-your-project-may-not-work-properly-until-you-apply-the-migrations-for-app-s-admin-auth-contenttypes-sessions-"&gt;You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.&lt;/h4&gt;&lt;h4 id="run-python-manage-py-migrate-to-apply-them-"&gt;Run ‘python manage.py migrate’ to apply them.&lt;/h4&gt;&lt;h4 id="march-18-2018-21-35-59"&gt;March 18, 2018–21:35:59&lt;/h4&gt;&lt;h4 id="django-version-2-0-3-using-settings-mobilebackend-settings-"&gt;Django version 2.0.3, using settings ‘mobileBackend.settings’&lt;/h4&gt;&lt;h4 id="starting-development-server-at-http-127-0-0-1-8000-"&gt;Starting development server at &lt;a href="http://127.0.0.1:8000/" rel="noopener"&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="quit-the-server-with-control-c-"&gt;Quit the server with CONTROL-C.&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;You can access your development server by going to &lt;a href="https://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt; in your browser. You’ll see the following page if everything goes well…&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_GTeVJHj9f2Bude8t12wWaQ.png" class="kg-image" alt="Django for React/Angular/Mobile Apps"&gt;&lt;/figure&gt;&lt;p&gt;Nice, but you would have seen a warning when you started the development server. It said you have unapplied migrations. Please don’t be thrown off by the buzz words, it is surprisingly simple.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Model migrations&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When you’re using Django, you don’t need to write SQL commands. Yes, for real. When you create a Django project, Django automatically creates a SQLite database for us. Now you can change the DB to whatever you want, but you will be interacting with the DB through Django’s ORM. This means that you will represent the tables in the databases as classes and entries in the table as objects. These classes which represents the database tables are called &lt;strong&gt;&lt;strong&gt;models&lt;/strong&gt;&lt;/strong&gt;in Django.&lt;/p&gt;&lt;p&gt;When you create or modify a model, you need to tell Django to create the SQL commands required to reflect the changes on the database. This process is called a &lt;strong&gt;&lt;strong&gt;migration&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;A migration is a two step process. First, we need to create the migrations, and then apply the migrations.&lt;/p&gt;&lt;p&gt;You can create migrations using :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you apply the migrations using:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you create a Django project, Django creates a few models for us, and also creates the corresponding migrations. Now all we need to do is apply those migrations, which we haven’t done. This is why Django is giving us a warning that the migrations need to be applied. Let’s go back to the terminal and press Ctrl+C to stop the server and apply the migrations by running &lt;code&gt;python manage.py migrate&lt;/code&gt;. Now if you run &lt;code&gt;python manage.py runserver&lt;/code&gt;again, you’ll see the warnings disappeared! Awesome!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Django apps&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now let’s explore the contents of the app Django created for us.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd mobileBackend&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you open the folder &lt;code&gt;mobileBackend&lt;/code&gt; in your project directory, you’ll find the following files.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;__init__.py&lt;/li&gt;&lt;li&gt;settings.py&lt;/li&gt;&lt;li&gt;urls.py&lt;/li&gt;&lt;li&gt;wsgi.py&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The two files that are useful to us is &lt;strong&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;urls.py&lt;/strong&gt;&lt;/strong&gt;. If you are keen on understanding the importance of each file fully, please read the official docs &lt;a href="https://docs.djangoproject.com/en/2.0/intro/tutorial01/" rel="noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;/strong&gt; holds all the configuration related to our project. And &lt;strong&gt;&lt;strong&gt;urls.py&lt;/strong&gt;&lt;/strong&gt; is the list of URL endpoints in our project. We will touch both of these files later in the article.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Our first Django app&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Let’s go back to the root of the project and create our first Django app. In this example, let’s create a simple app which shows a list of movie actors.&lt;/p&gt;&lt;p&gt;cd ..&lt;br&gt;python manage.py startapp actors&lt;/p&gt;&lt;p&gt;&lt;code&gt;startapp&lt;/code&gt; is a management command that creates a Django app for us. Here we have created an app called actors. Let’s explore the contents of the app.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd actors&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see Django creates an app structure for us. This is an excellent time saver, and also ensures we follow best practices when it comes to structuring our applications. Let’s see the files that are useful to us for this article.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;models.py&lt;/code&gt; — This file holds all the models of the app.&lt;/li&gt;&lt;li&gt;&lt;code&gt;views.py&lt;/code&gt; — This file is a collection of functions which gets executed when a request to a URL endpoint is made. For each endpoint, we can specify which function to execute. We will only have the functions for the endpoints associated with the app in its &lt;code&gt;views.py&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now let’s create our first model. Open your &lt;code&gt;actors/models.py&lt;/code&gt; file.&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/0c1122be32d85e9a9f982837f2a6f011.js"&gt;&lt;/script&gt;&lt;p&gt;So we have created 4 fields for the actor model: &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;dp&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;. &lt;code&gt;CharField&lt;/code&gt; is Django’s way of saying that the values of this field will contain characters. &lt;code&gt;max_length&lt;/code&gt; attribute specifies the maximum number of characters allowed. &lt;code&gt;blank=True&lt;/code&gt; and &lt;code&gt;null=True&lt;/code&gt; says that empty and null values are allowed. &lt;code&gt;IntegerField&lt;/code&gt; can only contain integer values, hence it is suitable for age. The syntax is really simple, isn’t it?&lt;/p&gt;&lt;p&gt;Cool! Now we have our first model. Earlier in the article, I said when we create or change a model, we should create and apply migrations. Let’s go ahead and do that. In your terminal,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output says ‘No changes detected’. What? How is this possible? We just created a model in our actors app!&lt;/p&gt;&lt;p&gt;There is just one problem.&lt;/p&gt;&lt;p&gt;When we create a Django app, Django doesn’t automatically include the app in the project. I know, that is weird. To tell Django that the app is a part of the project, we need to include the app in the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list in the &lt;code&gt;settings.py&lt;/code&gt; file. This applies to all apps we create, and also the third party libraries we install on our Django project. When we installed Django, we also installed Django Rest Framework. We need to add that to the &lt;code&gt;INSTALLED_APPS&lt;/code&gt;as well.&lt;/p&gt;&lt;p&gt;Let’s do that now.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd mobileBackend&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open settings.py, and find the list of &lt;code&gt;INSTALLED_APPS&lt;/code&gt;.&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/666792173f98ceca5cd518e4f62adab2.js"&gt;&lt;/script&gt;&lt;p&gt;Let’s try applying migrations again.&lt;/p&gt;&lt;p&gt;Go to terminal and navigate to the root of your project and run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Awesome! Now let’s create some actors. &lt;code&gt;manage.py&lt;/code&gt; comes with a shell, which gives us access to our models in our Django project. To use the shell, from the terminal, run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python manage.py shell&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s create some actors!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from actors.models import Actor

actor1 = Actor(first_name="Tom",last_name="Cruise",dp="https://ia.media-imdb.com/images/M/MV5BMTk1MjM3NTU5M15BMl5BanBnXkFtZTcwMTMyMjAyMg@@._V1_UY317_CR14,0,214,317_AL_.jpg",age=55)

actor1.save()

actor2 = Actor(first_name="Hugh",last_name="Jackman",dp="https://images-na.ssl-images-amazon.com/images/M/MV5BNDExMzIzNjk3Nl5BMl5BanBnXkFtZTcwOTE4NDU5OA@@._V1_UX214_CR0,0,214,317_AL_.jpg",age=49)

actor2.save()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That was fairly straightforward. Before exiting the shell, let’s verify if the objects were actually saved. You can access all objects of the Actor model using:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Actor.objects.all()&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This will give the following response:&lt;/p&gt;&lt;h4 id="queryset-actor-actor-object-1-actor-actor-object-2-"&gt;&amp;lt;QuerySet [&amp;lt;Actor: Actor object (1)&amp;gt;, &amp;lt;Actor: Actor object (2)&amp;gt;]&amp;gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Django QuerySets&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A &lt;strong&gt;&lt;strong&gt;QuerySet&lt;/strong&gt;&lt;/strong&gt; represents a collection of objects from your database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT. In this example when we do &lt;code&gt;Actor.objects.all()&lt;/code&gt; we are selecting all elements from the Actor table without any filters.&lt;/p&gt;&lt;p&gt;An example of a filter would be: &lt;code&gt;Actor.objects.filter(age = 40)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now that we have verified that our objects are in the database, let’s exit the shell by using Ctrl+D.&lt;/p&gt;&lt;p&gt;Now, let’s create an API endpoint, so that our frontend app can access the actors. Navigate to the &lt;code&gt;urls.py&lt;/code&gt; file in &lt;code&gt;mobileBackend&lt;/code&gt; app.&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/2b6d88de484c2d725ec217ddc325579c.js"&gt;&lt;/script&gt;&lt;p&gt;There is a very useful docstring describing how urls.py should be used. Django has added an &lt;code&gt;'admin/'&lt;/code&gt; route by default for us. We have created a new route called &lt;code&gt;'fetch_actors/'&lt;/code&gt;. We are also importing a function called &lt;code&gt;fetch_actors&lt;/code&gt; from &lt;code&gt;actors.views&lt;/code&gt;. We have not created this function as of now, but we will use this function to process the request and create a response. Let’s see what is happening here.&lt;/p&gt;&lt;p&gt;Whenever a user makes a request, Django first looks at this &lt;code&gt;urls.py&lt;/code&gt; file, and checks for a match between the request URL and the &lt;code&gt;urlpatterns&lt;/code&gt; specified here. If it find a match, it sends the request to the corresponding view function of that URL. A view function takes the request as an input, and produces a response. We don’t have the view function yet. So let’s create one.&lt;/p&gt;&lt;p&gt;Open &lt;code&gt;actors/views.py&lt;/code&gt; in your project. We have named our function &lt;code&gt;fetch_actors&lt;/code&gt; in &lt;code&gt;urls.py&lt;/code&gt;. We should give the function the same name.&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/ddaec7067712c7e15682bdb26d8e8a8d.js"&gt;&lt;/script&gt;&lt;p&gt;Here, we are doing two additional imports. &lt;code&gt;HttpResponse&lt;/code&gt; and &lt;code&gt;Actor&lt;/code&gt; model. HttpResponse is a Django built in function which lets us send back Http responses. Pretty self explanatory isn’t it. We have also imported the &lt;code&gt;Actor&lt;/code&gt;model so that we fetch all the actor objects and send it as a response.&lt;/p&gt;&lt;p&gt;Let’s try visiting the URL. Please start your server, if it is not running, and go to &lt;code&gt;&lt;a href="http://localhost:8000/fetch_actors/"&gt;http://localhost:8000/fetch_actors/&lt;/a&gt;&lt;/code&gt;&lt;a href="http://localhost:8000/fetch_actors/"&gt;.&lt;/a&gt; You’ll see something like this:&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_UH2Gg6uhC-T8IDG0Rtkn5g.png" class="kg-image" alt="Django for React/Angular/Mobile Apps"&gt;&lt;/figure&gt;&lt;p&gt;Hmmm.. It definitely did the right thing, but this is not very useful to use isn’t it? If our frontend client were to make this request and if it gets this response, it won’t be useful at all. Just like how for two people to speak with each other, they both need to know the same language, frontend client and backend service should also speak the same language, so that the response is useful for the frontend client. And that language, in our case is, yes, you guessed it, JSON. Now how do we convert a QuerySet to JSON? Enter Django Rest Framework. This can be done using something called as a &lt;strong&gt;&lt;strong&gt;serializer.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Serializers&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Again, it is just a fancy name for something very simple. A serializer represents Django models as JSON objects. There is no better way to understand this than writing some code. So we will do just that.&lt;/p&gt;&lt;p&gt;Let’s create a new file called &lt;code&gt;serializers.py&lt;/code&gt; in our &lt;code&gt;actors&lt;/code&gt; app.&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/77580e1b9186e67a0b1c750e95dacbd7.js"&gt;&lt;/script&gt;&lt;p&gt;We are using &lt;code&gt;rest_framework&lt;/code&gt;'s default &lt;code&gt;ModelSerializer&lt;/code&gt;. All we need to do is create a class &lt;code&gt;ActorSerializer&lt;/code&gt; and specify the name of the model we want to serialize, and the fields that are required from the model as a list. You can also pass &lt;code&gt;'__all__'&lt;/code&gt; if you want to include all the fields. Now we can use this serializer in our view function to send the response as JSON.&lt;/p&gt;&lt;p&gt;Let’s modify &lt;code&gt;actors/views.py&lt;/code&gt; as follows:&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/98199e66e291d5874498f31267d409c0.js"&gt;&lt;/script&gt;&lt;p&gt;We are importing the &lt;code&gt;ActorSerializer&lt;/code&gt; we just created. We are also importing two other things, an &lt;code&gt;api_view&lt;/code&gt; decorator, and we have replaced &lt;code&gt;HttpResponse&lt;/code&gt;from Django to the one from &lt;code&gt;rest_framework&lt;/code&gt;. The &lt;code&gt;api_view&lt;/code&gt; decorator wraps our view function to add the additional processing required from the &lt;code&gt;rest_framework&lt;/code&gt;. We also need to specify the allowed request methods, in our case, we only allow &lt;code&gt;get&lt;/code&gt; requests. The additional step between fetching the actor objects and returning the response to the user is the step where we are serializing the QuerySet to JSON with our &lt;code&gt;ActorSerializer&lt;/code&gt;. &lt;code&gt;many=True&lt;/code&gt; tells the serializer that there are potentially more than one object in the QuerySet. Once serialized, the JSON representation is available in &lt;code&gt;serializer.data&lt;/code&gt;. Hence we are sending that as a the response.Let’s trying checking our URL again.Goto &lt;code&gt;&lt;a href="http://localhost:8000/fetch_actors/"&gt;http://localhost:8000/fetch_actors/&lt;/a&gt;&lt;/code&gt; and you’ll see something like this.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_NQZPw0FFuWcbyHyyULRAMw.png" class="kg-image" alt="Django for React/Angular/Mobile Apps"&gt;&lt;/figure&gt;&lt;p&gt;Look at that! Nice, clean, JSON. Exactly what we wanted. In a few lines of code, we have&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Created a project and set up our first Django app.&lt;/li&gt;&lt;li&gt;Created a model to store the actors.&lt;/li&gt;&lt;li&gt;Created an API endpoint for our frontend client to consume.&lt;/li&gt;&lt;li&gt;Set up a view function to respond to the API request in JSON format.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Hopefully, I have convinced you to use this architecture for your next project. Please feel free to ask any questions if you get stuck.&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Setting up Django Channels on AWS Elastic Beanstalk</title><description>Step by step guide to host a Django Channels application on AWS Elastic Beanstalk.</description><link>http://localhost:2368/setting-up-django-channels-on-aws-elastic-beanstalk/</link><guid isPermaLink="false">5b5d2d55550d572610b60764</guid><category>Django</category><category>AWS</category><category>Elastic-Beanstalk</category><category>Django-Channels</category><dc:creator>Abhishek Menon</dc:creator><pubDate>Tue, 21 Nov 2017 01:25:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/07/photo-1518481852452-9415b262eba4.jpeg" medium="image"/><content:encoded>&lt;h1 id="setting-up-django-channels-on-aws-elastic-beanstalk"&gt;Setting up Django Channels on AWS Elastic Beanstalk&lt;/h1&gt;&lt;img src="http://localhost:2368/content/images/2018/07/photo-1518481852452-9415b262eba4.jpeg" alt="Setting up Django Channels on AWS Elastic Beanstalk"&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;UPDATE: This tutorial is for Channels 1.X and not for Channels 2.x. Please leave me a note if you guys want to see another tutorial for Channels 2.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Django has always been one of the outliers in the modern era of real-time, asynchronous frameworks and libraries. If you want to build a chat application, for example, Django, most probably wouldn’t be your first choice. However, for those of you out there who hate JavaScript, or if you’re a “perfectionist with a deadline”, Django Channels presents you with a great option.&lt;/p&gt;&lt;p&gt;Django Channels is a library which brings the power of asynchronous web to Django. If you aren’t familiar with Django Channels, I highly recommend getting yourself familiarised with it before you read further. There are excellent articles out there explaining what Django Channels is, and how it can transform the way you use Django. These articles by &lt;a href="https://realpython.com/blog/python/getting-started-with-django-channels/" rel="noopener"&gt;real python&lt;/a&gt; and &lt;a href="https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django" rel="nofollow noopener"&gt;heroku&lt;/a&gt; are two great examples. It also shows you how to build a basic chat application using Channels. It is fairly straightforward to set up, and will get you going in a few minutes!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;The problems with hosting a Django Channels Application&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In traditional Django, requests are handled by the Django application itself. It looks at the request and URL, determines the correct view function to execute, executes it, produces a response and sends the response back to the user. Fairly straightforward. Django Channels, however, introduces an Interface Server (Daphne) in between. This means that the Interface server now communicates with the outside world. The interface server looks at the request and URL, determines the right “Channel”, process the request and creates a “message” for the worker process to consume, and places the message in that Channel. A message broker, like Redis, listens to these Channels, and delivers the messages to worker processes. The worker process listens to the message queue, processes the message (much like a view function) and produces the response and sends it back to the interface server, which then delivers it back to the user. (Please feel free to take a minute to grasp this, it took me many hours :’))&lt;/p&gt;&lt;p&gt;This means now, instead of just a single process running, which you would be starting using:&lt;/p&gt;&lt;p&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/p&gt;&lt;p&gt;You would be running:&lt;/p&gt;&lt;p&gt;&lt;code&gt;daphne -p 8000 your_app.asgi:channel_layer&lt;/code&gt;&lt;/p&gt;&lt;p&gt;and&lt;/p&gt;&lt;p&gt;&lt;code&gt;python manage.py runworker&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This enables Django Channels to support multiple types of requests (HTTP, Websockets etc). But clearly, it requires more resources than a standard Django application. For one, it requires a message broker. You can get away with an in memory message broker, but it is not recommended for production purposes. In this example, we will setup Redis in an EC2 instance and use that as the message broker.&lt;/p&gt;&lt;p&gt;If you’re using Elastic Beanstalk, it is configured to listen to port 80 by default, which is where generally your worker process will be running. But we want the application to listen to Daphne instead, so that would require configuring the Load Balancer to forward requests to the port where Daphne is listening.&lt;/p&gt;&lt;p&gt;But before all that, we first need to host our Django Application itself. If you are not familiar with how to do that, please follow the steps here:&lt;/p&gt;&lt;p&gt;&lt;a href="https://realpython.com/blog/python/deploying-a-django-app-and-postgresql-to-aws-elastic-beanstalk/"&gt;&lt;strong&gt;Deploying Django + Python 3 + PostgreSQL to AWS Elastic Beanstalk&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 id="the-only-change-is-that-you-should-select-the-application-load-balancer-instead-of-the-classic-load-balancer-as-websockets-is-only-natively-supported-by-application-load-balancer-"&gt;The only change is that you should &lt;strong&gt;select the Application Load Balancer instead of the Classic Load Balancer as WebSockets is only natively supported by Application Load Balancer&lt;/strong&gt;.&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Next Steps:&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now we need to provision Redis for the channel layer. We can do this in two ways:&lt;/p&gt;&lt;p&gt;1.A. Provisioning a Redis Instance from EC2&lt;/p&gt;&lt;p&gt;1.B. Using ElastiCache&lt;/p&gt;&lt;p&gt;You can pick either one, but please note that &lt;strong&gt;&lt;strong&gt;ElastiCache includes a&lt;/strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;strong&gt;free tier&lt;/strong&gt;&lt;/strong&gt;as of the date of this post. &lt;strong&gt;&lt;strong&gt;You just need to do either 1.A or 1.B&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id="1-a-provisioning-a-redis-instance-for-message-broker"&gt;&lt;strong&gt;&lt;strong&gt;1.A. Provisioning a Redis Instance for message broker&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Sign in to your AWS console and go to EC2. Click “Launch Instance” on the top and select AWS Marketplace on the side menu.&lt;/p&gt;&lt;p&gt;Search for Redis 4.0&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/07/1_XsKJ8BlqHZwoqPNPMMNpfQ--1--1.png" class="kg-image" alt="Setting up Django Channels on AWS Elastic Beanstalk"&gt;&lt;/figure&gt;&lt;p&gt;After this, follow through the next steps. Please be sure to store the ssh-key (pem file) for the instance. After that, click “Review and Launch”. This will get your Redis instance up and running.&lt;/p&gt;&lt;p&gt;Now ssh into your Redis instance and open &lt;code&gt;redis.conf&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo nano /jet/etc/redis/redis.conf&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Change the address from &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;0.0.0.0&lt;/code&gt; and port from &lt;code&gt;1999&lt;/code&gt; to &lt;code&gt;6379&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Save and restart the using:&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo service restart redis&lt;/code&gt;&lt;/p&gt;&lt;p&gt;You can check everything is correctly configured by running &lt;code&gt;netstat -antpl&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This command should show Redis running at 0.0.0.0:6379.&lt;/p&gt;&lt;p&gt;After this, select the instance from EC2 Dashboard, and in the menu below, select it’s security group (this should look something like Redis 4–0–170715-redis_4_0_0-AutogenByAWSMP). Add a new inbound rule with following info:&lt;/p&gt;&lt;p&gt;Type: Custom TCP Rule, Protocol: TCP, Port Range: 6379, Source: 0.0.0.0/0&lt;/p&gt;&lt;p&gt;You don’t need to add the above if it already exists or you can just modify the existing line if the port number is different. Now, grab the Public DNS of your Redis instance from EC2 Dashboard and save it for reference.&lt;/p&gt;&lt;h3 id="1-b-set-up-elasticache-with-redis-instance"&gt;1.B. &lt;strong&gt;&lt;strong&gt;Set up ElastiCache with Redis instance&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Credits for this section: &lt;/strong&gt;&lt;/strong&gt;&lt;a href="https://medium.com/@cpvandehey"&gt;&lt;strong&gt;&lt;strong&gt;Chad Van De Hey&lt;/strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Sign into your AWS console and go to the ElastiCache service. Click to create a new ElastiCache cluster or if you have not created anything beforehand, click “Get Started”. We are going to be setting up an EC Redis cluster.&lt;/p&gt;&lt;p&gt;a. Click Redis as your cluster engine&lt;/p&gt;&lt;p&gt;b. Enter a name, description and choose the newest Engine version available.&lt;/p&gt;&lt;p&gt;c. Make sure the port is set to 6379.&lt;/p&gt;&lt;p&gt;d. Set the node type to the smallest available&lt;/p&gt;&lt;p&gt;e. Select t2 at the top -&amp;gt; select cache.t2.micro (for free tier)&lt;/p&gt;&lt;p&gt;f. Select “None” for Number of replicas and unselect “multi-az with auto-failover”.&lt;/p&gt;&lt;p&gt;g. Either select an existing subnet of your existing choices or create a new one selecting an AZ that is same as your EC2s.&lt;/p&gt;&lt;p&gt;h. Choose the security group of your EC2s that you created in Elastic Beanstalk.&lt;/p&gt;&lt;p&gt;i. Unselect “Enable automatic backups” and click “Create”&lt;/p&gt;&lt;p&gt;You will be redirected to your ElastiCache clusters/instances. Here you will see your instances been spun up and configured. After this process has completed, make sure to note down the url of the ElastiCache instance because you will need to configure your Django app with that later.&lt;/p&gt;&lt;h3 id="2-editing-the-django-configuration"&gt;2. Editing the Django Configuration&lt;/h3&gt;&lt;p&gt;Now in your &lt;code&gt;settings.py&lt;/code&gt; file for production, change your redis host and port to use the newly created Redis instance.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;CHANNEL_LAYERS = {
 "default": {
  "BACKEND": "asgi_redis.RedisChannelLayer",
  "CONFIG": {
   "hosts": ["redis://(&amp;lt;The Public DNS of the Redis instance&amp;gt;, 6379)"],
  },
 "ROUTING": "&amp;lt;your_app&amp;gt;.routing.channel_routing", 
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please change &amp;lt;your app&amp;gt; to the name of your app. This will configure your Django application to use the Redis instance we created.&lt;/p&gt;&lt;h3 id="3-running-daphne-server-and-a-worker-process-as-daemon"&gt;&lt;strong&gt;&lt;strong&gt;3. Running Daphne Server and a worker process as daemon&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;script src="https://gist.github.com/mav-erick/8c8730e6578dc31dc32ee61c9bd9a83d.js"&gt;&lt;/script&gt;&lt;p&gt;Please change &amp;lt;your_project&amp;gt; to the name of your django app. This basically creates a script and places it in &lt;code&gt;/opt/elasticbeanstalk/hooks/appdeploy/post/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;so that it executes &lt;strong&gt;&lt;strong&gt;after&lt;/strong&gt;&lt;/strong&gt; the application deploys. Now this script, in turn creates a supervisord conf script, which is responsible for running the daemon processes and managing the supervisord . (Again, please feel free to take a minute to grasp this :’) )&lt;/p&gt;&lt;h3 id="4-the-final-step-configure-the-alb"&gt;&lt;strong&gt;&lt;strong&gt;4. The final step: Configure the ALB&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Now we have our Redis set up, daphne and worker process running, now all we need to do is to configure our Application Load Balancer to forward the requests to our Daphne server which is listening on port 5000 (Please check the config script of the daemon processes).&lt;/p&gt;&lt;p&gt;Create a new file in your &lt;code&gt;.ebextensions&lt;/code&gt; folder called &lt;code&gt;alb_listener.config&lt;/code&gt;and place put the following code in.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;option_settings:  
  aws:elbv2:listener:80:    
    DefaultProcess: http    
    ListenerEnabled: 'true'    
    Protocol: HTTP  
  aws:elasticbeanstalk:environment:process:http:    
    Port: '5000'    
    Protocol: HTTP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please be careful of the spaces as this is in YAML syntax.&lt;/p&gt;&lt;p&gt;Redeploy your app and Viola! your Django Channels app is up and running on AWS Elastic Beanstalk.&lt;/p&gt;&lt;p&gt;If you have any questions, please feel free to ask in the comments! Any recommendations for future blog posts is also welcome, if you like this one, that is. :’)&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item></channel></rss>